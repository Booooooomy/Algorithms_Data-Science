International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: "a" maps to ".-", "b" maps to "-...", "c" maps to "-.-.", and so on.

For convenience, the full table for the 26 letters of the English alphabet is given below:

[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, "cba" can be written as "-.-.-....-", (which is the concatenation "-.-." + "-..." + ".-"). We'll call such a concatenation, the transformation of a word.

Return the number of different transformations among all words we have.

Example:
Input: words = ["gin", "zen", "gig", "msg"]
Output: 2
Explanation: 
The transformation of each word is:
"gin" -> "--...-."
"zen" -> "--...-."
"gig" -> "--...--."
"msg" -> "--...--."

There are 2 different transformations, "--...-." and "--...--.".


Analysis:

1. 주어진 모스코드들과 알파벳을 연결시키는 방법
  - 여러가지가 있지만, 나는 (알파벳의 ASCII - 97) 해서 벡터의 index로 만들었다.
2. unordered_set의 사용
  - 중복되는 string을 자동으로 제거하는 unordered_set을 사용했다.
  - 이미 있는 string에 다른 string을 cascading하는 방법은 next += mors[]; 방법을 쓰면 간단하다.
  - 그리고 uset.size();을 return하면 된다.

'''C++
class Solution {
public:
    int uniqueMorseRepresentations(vector<string>& words) 
    {
        vector<string> mors = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
            
        unordered_set<string> uset;
        
        for(string st: words)
        {
            string nest = "";
            for(char c: st)
            {
                nest += mors[c-97];
            }
            uset.insert(nest);
        }
        
        return uset.size();
    }
};
'''
