
Given a string S that only contains "I" (increase) or "D" (decrease), let N = S.length.
Return any permutation A of [0, 1, ..., N] such that for all i = 0, ..., N-1:
If S[i] == "I", then A[i] < A[i+1]
If S[i] == "D", then A[i] > A[i+1]

Example 1:
Input: "IDID"
Output: [0,4,1,3,2]

Example 2:
Input: "III"
Output: [0,1,2,3]

Example 3:
Input: "DDI"
Output: [3,2,0,1]

Note: 1 <= S.length <= 10000, S only contains characters "I" or "D".



<Analysis>
1. 매커니즘을 생각해보자. 간단하게, I가 나오는 경우 남은 수 중 가장 작은 수를, D가 나오는 경우 가장 큰 수를 프린트한다.



C++ code:
vector diStringMatch(string S) 
{
    vector<int> res;
    if(S.size() == 0) return res;
    
    int j = S.size();
    int l = j;
    int k = 0;
    for(int i =0; i < l; ++i)
    {
        if(S[i] == 'I')
        {
           res.push_back(k);
            ++k;
        }
            
        else 
        {
          res.push_back(j); 
          --j; 
        }      
    }

    if(k < S.size()- j) res.push_back(k);    
    else res.push_back(j);

    return res;   
}
