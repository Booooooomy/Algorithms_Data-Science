Every email consists of a local name and a domain name, separated by the @ sign.
For example, in alice@leetcode.com, alice is the local name, and leetcode.com is the domain name.
Besides lowercase letters, these emails may contain '.'s or '+'s.
If you add periods ('.') between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name.  For example, "alice.z@leetcode.com" and "alicez@leetcode.com" forward to the same email address.  (Note that this rule does not apply for domain names.)
If you add a plus ('+') in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered, for example m.y+name@email.com will be forwarded to my@email.com.  (Again, this rule does not apply for domain names.)
It is possible to use both of these rules at the same time.
Given a list of emails, we send one email to each address in the list.  How many different addresses actually receive mails?

Example 1:
Input: ["test.email+alex@leetcode.com","test.e.mail+bob.cathy@leetcode.com","testemail+david@lee.tcode.com"]
Output: 2
Explanation: "testemail@leetcode.com" and "testemail@lee.tcode.com" actually receive mails

Analysis:
1. @을 기점으로 local name과 domain name이 나누어지니까 이걸 새로운 string의 형식으로 두 개로 나누어야 하는가?
  - 그럼 어어엄청 많아질테니 보류.
  - 대신에 bool을 사용하자. 물론 int 등의 카운터를 쓸 수도 있지만 이 경우 서로 다른 케이스가 @전과 @후의 2가지이므로 편의상 bool을 사용한다.
2. 우선 주어진 string의 char별로 접근을 해야하니 for loop이 필요한 건 필수인 듯.
3. 그런데 unordered_set에 넣을 때 어떤 포맷으로 넣을까? 주어진 조건들을 보자.
  - 우선 local name 안에 있는 .은 무시해준다했으므로 무시ㄱㄱ.
  - local name 안에 있는 + 이후의 부분들은 역시 무시 ㄱㄱ.
4. char을 하나하나 string에 넣는 방법?
  - 걍 밑에처럼 string a 만들어주고 거기에 += 해당 char 해주면 됨.
5. corner cases 잊지 말고.
******
6. unordered_set의 사용. 이번 문제처럼 주어진 email의 개수 n이 늘어남에 따라 비교의 개수도 크게 늘어나는 경우에 직접 비교를 하는 것은 무리다.
그래서 우리는 unordered_set을 사용하여 스스로 중복되는 element가 있는지 확인하고 있으면 하나를 갖다버리게끔 하여 우리의 일을 이 친구에게 미룬다.
  - unordered_set을 declare 할 때에는 template 명시를 꼭 해줘야 한다. insert()와 size()의 등의 커맨드들이 있다.

```c++
class Solution 
{
public:
    int numUniqueEmails(vector<string>& emails)
    {
        unordered_set<string> ST;
        
        if(emails.size() == 0) return 0;
        
        for(auto& em: emails)
        {    
            bool flag = false;
            string a = "";
            for(int i = 0; i < em.length(); i++)
            {
                if(em[i] == '.' && flag == false)
                {
                    i++;
                }
                if(em[i] == '+' && flag == false)
                {
                    while(em[i] != '@')
                    {
                        i++;
                    }
                }
                if(em[i] == '@')
                flag = true;
                a+=em[i];                  
            }
            ST.insert(a);
        }
        
        return ST.size();
    }
};
'''



















